// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CourseStatus.
const (
	Closed   CourseStatus = "closed"
	Deleted  CourseStatus = "deleted"
	Expired  CourseStatus = "expired"
	Open     CourseStatus = "open"
	Personal CourseStatus = "personal"
)

// Defines values for UserRole.
const (
	UserRoleAdmin   UserRole = "admin"
	UserRoleLain    UserRole = "Lain"
	UserRoleMember  UserRole = "member"
	UserRoleMentor  UserRole = "mentor"
	UserRoleTeacher UserRole = "teacher"
)

// Defines values for GetUsersParamsRole.
const (
	GetUsersParamsRoleAdmin   GetUsersParamsRole = "admin"
	GetUsersParamsRoleLain    GetUsersParamsRole = "Lain"
	GetUsersParamsRoleMember  GetUsersParamsRole = "member"
	GetUsersParamsRoleMentor  GetUsersParamsRole = "mentor"
	GetUsersParamsRoleTeacher GetUsersParamsRole = "teacher"
)

// Course defines model for Course.
type Course struct {
	AuthorId      *int          `json:"author_id,omitempty"`
	Category      *[]string     `json:"category,omitempty"`
	CourseImageId *string       `json:"course_image_id,omitempty"`
	CreatedAt     *time.Time    `json:"createdAt,omitempty"`
	Description   *string       `json:"description,omitempty"`
	EndDate       *time.Time    `json:"endDate,omitempty"`
	Id            *int32        `json:"id,omitempty"`
	Price         *float32      `json:"price,omitempty"`
	StartDate     *time.Time    `json:"startDate,omitempty"`
	Status        *CourseStatus `json:"status,omitempty"`
	Title         *string       `json:"title,omitempty"`
	UpdatedAt     *time.Time    `json:"updatedAt,omitempty"`
}

// CourseStatus defines model for Course.Status.
type CourseStatus string

// Courses defines model for Courses.
type Courses = []Course

// InternalServiceError defines model for InternalServiceError.
type InternalServiceError struct {
	Code    *int         `json:"code,omitempty"`
	Message *interface{} `json:"message,omitempty"`
}

// Playlist defines model for Playlist.
type Playlist struct {
	AuthorId    int        `json:"author_id"`
	CoursesIds  *[]int     `json:"courses_ids,omitempty"`
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *int64     `json:"id,omitempty"`
	ImageId     *string    `json:"image_id,omitempty"`
	Title       string     `json:"title"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
}

// Playlists defines model for Playlists.
type Playlists = []Playlist

// User defines model for User.
type User struct {
	AvatarId    string     `json:"avatar_id"`
	Description *string    `json:"description,omitempty"`
	Email       string     `json:"email"`
	Id          *int64     `json:"id,omitempty"`
	Login       string     `json:"login"`
	Password    *string    `json:"password,omitempty"`
	Role        []UserRole `json:"role"`
}

// UserRole defines model for User.Role.
type UserRole string

// UserSignIn defines model for UserSignIn.
type UserSignIn struct {
	Email    *string `json:"email,omitempty"`
	Login    *string `json:"login,omitempty"`
	Password *string `json:"password,omitempty"`
}

// UserSignUp defines model for UserSignUp.
type UserSignUp struct {
	Email        *string `json:"email,omitempty"`
	Login        *string `json:"login,omitempty"`
	Notification *bool   `json:"notification,omitempty"`
	Password     *string `json:"password,omitempty"`
}

// Users List of user object
type Users = []User

// PostCourseImageMultipartBody defines parameters for PostCourseImage.
type PostCourseImageMultipartBody = string

// GetCoursesParams defines parameters for GetCourses.
type GetCoursesParams struct {
	// Limit Параметр для получения определенное количество курсов
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Параметр для получения определенного количества курсов через offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Параметр для сортировки курсов по указанному полю и методу сортировки
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetPlaylistsParams defines parameters for GetPlaylists.
type GetPlaylistsParams struct {
	// Limit Параметр для получения определенное количество курсов
	Limit     *int      `form:"limit,omitempty" json:"limit,omitempty"`
	Author    *[]string `form:"author,omitempty" json:"author,omitempty"`
	CreatedAt *string   `form:"createdAt,omitempty" json:"createdAt,omitempty"`
	Status    *[]string `form:"status,omitempty" json:"status,omitempty"`
	Title     *string   `form:"title,omitempty" json:"title,omitempty"`

	// OrderBy Параметр для сортировки курсов по указанному полю и методу сортировки
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostPlaylistsImageMultipartBody defines parameters for PostPlaylistsImage.
type PostPlaylistsImageMultipartBody = string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Параметр для получения определенное количество курсов
	Limit *int                  `form:"limit,omitempty" json:"limit,omitempty"`
	Role  *[]GetUsersParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// OrderBy Параметр для сортировки курсов по указанному полю и методу сортировки
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetUsersParamsRole defines parameters for GetUsers.
type GetUsersParamsRole string

// PostUsersAvatarMultipartBody defines parameters for PostUsersAvatar.
type PostUsersAvatarMultipartBody = string

// PostCourseImageMultipartRequestBody defines body for PostCourseImage for multipart/form-data ContentType.
type PostCourseImageMultipartRequestBody = PostCourseImageMultipartBody

// PostPlaylistsImageMultipartRequestBody defines body for PostPlaylistsImage for multipart/form-data ContentType.
type PostPlaylistsImageMultipartRequestBody = PostPlaylistsImageMultipartBody

// PostPlaylistsNewJSONRequestBody defines body for PostPlaylistsNew for application/json ContentType.
type PostPlaylistsNewJSONRequestBody = Playlist

// PostUsersAvatarMultipartRequestBody defines body for PostUsersAvatar for multipart/form-data ContentType.
type PostUsersAvatarMultipartRequestBody = PostUsersAvatarMultipartBody

// PostUsersSignInJSONRequestBody defines body for PostUsersSignIn for application/json ContentType.
type PostUsersSignInJSONRequestBody = UserSignIn

// PostUsersSignUpJSONRequestBody defines body for PostUsersSignUp for application/json ContentType.
type PostUsersSignUpJSONRequestBody = UserSignUp

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload image
	// (POST /course/image)
	PostCourseImage(w http.ResponseWriter, r *http.Request)
	// Create course
	// (POST /course/new)
	PostCourseNew(w http.ResponseWriter, r *http.Request)
	// Delete course
	// (DELETE /course/{id})
	DeleteCourseId(w http.ResponseWriter, r *http.Request, id int)
	// Get course by id
	// (GET /course/{id})
	GetCourse(w http.ResponseWriter, r *http.Request, id int)
	// Update course
	// (PUT /course/{id})
	PutCourseId(w http.ResponseWriter, r *http.Request, id int)
	// List all courses
	// (GET /courses)
	GetCourses(w http.ResponseWriter, r *http.Request, params GetCoursesParams)
	// List all playlists
	// (GET /playlists)
	GetPlaylists(w http.ResponseWriter, r *http.Request, params GetPlaylistsParams)
	// Upload image to playlist
	// (POST /playlists/image)
	PostPlaylistsImage(w http.ResponseWriter, r *http.Request)
	// Create playlist
	// (POST /playlists/new)
	PostPlaylistsNew(w http.ResponseWriter, r *http.Request)
	// Delete playlist
	// (DELETE /playlists/{id})
	DeletePlaylistsId(w http.ResponseWriter, r *http.Request, id int)
	// Get playlist by id
	// (GET /playlists/{id})
	GetPlaylistsId(w http.ResponseWriter, r *http.Request, id int)
	// Update playlist
	// (PUT /playlists/{id})
	PutPlaylistsId(w http.ResponseWriter, r *http.Request, id int)
	// pong
	// (GET /pong)
	Pong(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{id})
	DeleteUserId(w http.ResponseWriter, r *http.Request, id int)
	// Get user by id
	// (GET /user/{id})
	GetUser(w http.ResponseWriter, r *http.Request, id int)
	// Update user
	// (PUT /user/{id})
	PutUserId(w http.ResponseWriter, r *http.Request, id int)
	// List all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Upload avatar
	// (POST /users/avatar)
	PostUsersAvatar(w http.ResponseWriter, r *http.Request)
	// Authorize user
	// (POST /users/sign_in)
	PostUsersSignIn(w http.ResponseWriter, r *http.Request)
	// Create user
	// (POST /users/sign_up)
	PostUsersSignUp(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Upload image
// (POST /course/image)
func (_ Unimplemented) PostCourseImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create course
// (POST /course/new)
func (_ Unimplemented) PostCourseNew(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete course
// (DELETE /course/{id})
func (_ Unimplemented) DeleteCourseId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get course by id
// (GET /course/{id})
func (_ Unimplemented) GetCourse(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update course
// (PUT /course/{id})
func (_ Unimplemented) PutCourseId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all courses
// (GET /courses)
func (_ Unimplemented) GetCourses(w http.ResponseWriter, r *http.Request, params GetCoursesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all playlists
// (GET /playlists)
func (_ Unimplemented) GetPlaylists(w http.ResponseWriter, r *http.Request, params GetPlaylistsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload image to playlist
// (POST /playlists/image)
func (_ Unimplemented) PostPlaylistsImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create playlist
// (POST /playlists/new)
func (_ Unimplemented) PostPlaylistsNew(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete playlist
// (DELETE /playlists/{id})
func (_ Unimplemented) DeletePlaylistsId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get playlist by id
// (GET /playlists/{id})
func (_ Unimplemented) GetPlaylistsId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update playlist
// (PUT /playlists/{id})
func (_ Unimplemented) PutPlaylistsId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// pong
// (GET /pong)
func (_ Unimplemented) Pong(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /user/{id})
func (_ Unimplemented) DeleteUserId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by id
// (GET /user/{id})
func (_ Unimplemented) GetUser(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /user/{id})
func (_ Unimplemented) PutUserId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all users
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload avatar
// (POST /users/avatar)
func (_ Unimplemented) PostUsersAvatar(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Authorize user
// (POST /users/sign_in)
func (_ Unimplemented) PostUsersSignIn(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /users/sign_up)
func (_ Unimplemented) PostUsersSignUp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostCourseImage operation middleware
func (siw *ServerInterfaceWrapper) PostCourseImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCourseImage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCourseNew operation middleware
func (siw *ServerInterfaceWrapper) PostCourseNew(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCourseNew(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCourseId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCourseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCourseId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCourse operation middleware
func (siw *ServerInterfaceWrapper) GetCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourse(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutCourseId operation middleware
func (siw *ServerInterfaceWrapper) PutCourseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutCourseId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCourses operation middleware
func (siw *ServerInterfaceWrapper) GetCourses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoursesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourses(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlaylists operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylists(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlaylistsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "createdAt" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAt", r.URL.Query(), &params.CreatedAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdAt", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "title", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlaylists(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPlaylistsImage operation middleware
func (siw *ServerInterfaceWrapper) PostPlaylistsImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPlaylistsImage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPlaylistsNew operation middleware
func (siw *ServerInterfaceWrapper) PostPlaylistsNew(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPlaylistsNew(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePlaylistsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePlaylistsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlaylistsId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlaylistsId operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylistsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlaylistsId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutPlaylistsId operation middleware
func (siw *ServerInterfaceWrapper) PutPlaylistsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPlaylistsId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Pong operation middleware
func (siw *ServerInterfaceWrapper) Pong(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Pong(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUserId(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersAvatar operation middleware
func (siw *ServerInterfaceWrapper) PostUsersAvatar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersAvatar(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersSignIn operation middleware
func (siw *ServerInterfaceWrapper) PostUsersSignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersSignIn(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersSignUp operation middleware
func (siw *ServerInterfaceWrapper) PostUsersSignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersSignUp(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/course/image", wrapper.PostCourseImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/course/new", wrapper.PostCourseNew)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/course/{id}", wrapper.DeleteCourseId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/course/{id}", wrapper.GetCourse)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/course/{id}", wrapper.PutCourseId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses", wrapper.GetCourses)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/playlists", wrapper.GetPlaylists)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/playlists/image", wrapper.PostPlaylistsImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/playlists/new", wrapper.PostPlaylistsNew)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/playlists/{id}", wrapper.DeletePlaylistsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/playlists/{id}", wrapper.GetPlaylistsId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/playlists/{id}", wrapper.PutPlaylistsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pong", wrapper.Pong)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{id}", wrapper.DeleteUserId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{id}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{id}", wrapper.PutUserId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/avatar", wrapper.PostUsersAvatar)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/sign_in", wrapper.PostUsersSignIn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/sign_up", wrapper.PostUsersSignUp)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
