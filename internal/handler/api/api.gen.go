// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CourseStatus.
const (
	Closed   CourseStatus = "closed"
	Deleted  CourseStatus = "deleted"
	Expired  CourseStatus = "expired"
	Open     CourseStatus = "open"
	Personal CourseStatus = "personal"
)

// Defines values for UserRole.
const (
	UserRoleAdmin   UserRole = "admin"
	UserRoleLain    UserRole = "Lain"
	UserRoleMember  UserRole = "member"
	UserRoleMentor  UserRole = "mentor"
	UserRoleTeacher UserRole = "teacher"
)

// Defines values for GetUsersParamsRole.
const (
	GetUsersParamsRoleAdmin   GetUsersParamsRole = "admin"
	GetUsersParamsRoleLain    GetUsersParamsRole = "Lain"
	GetUsersParamsRoleMember  GetUsersParamsRole = "member"
	GetUsersParamsRoleMentor  GetUsersParamsRole = "mentor"
	GetUsersParamsRoleTeacher GetUsersParamsRole = "teacher"
)

// Course defines model for Course.
type Course struct {
	AuthorId      *int          `json:"author_id,omitempty"`
	Category      *[]string     `json:"category,omitempty"`
	CourseImageId *string       `json:"course_image_id,omitempty"`
	CreatedAt     *time.Time    `json:"createdAt,omitempty"`
	Description   *string       `json:"description,omitempty"`
	EndDate       *time.Time    `json:"endDate,omitempty"`
	Id            *int32        `json:"id,omitempty"`
	Price         *float32      `json:"price,omitempty"`
	StartDate     *time.Time    `json:"startDate,omitempty"`
	Status        *CourseStatus `json:"status,omitempty"`
	Title         *string       `json:"title,omitempty"`
	UpdatedAt     *time.Time    `json:"updatedAt,omitempty"`
}

// CourseStatus defines model for Course.Status.
type CourseStatus string

// Courses defines model for Courses.
type Courses = []Course

// InternalServiceError defines model for InternalServiceError.
type InternalServiceError struct {
	Code    *int         `json:"code,omitempty"`
	Message *interface{} `json:"message,omitempty"`
}

// Playlist defines model for Playlist.
type Playlist struct {
	AuthorId    int        `json:"author_id"`
	CoursesIds  *[]int     `json:"courses_ids,omitempty"`
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *int64     `json:"id,omitempty"`
	ImageId     *string    `json:"image_id,omitempty"`
	Title       string     `json:"title"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
}

// Playlists defines model for Playlists.
type Playlists = []Playlist

// User defines model for User.
type User struct {
	AvatarId    string     `json:"avatar_id"`
	Description *string    `json:"description,omitempty"`
	Email       string     `json:"email"`
	Id          *int64     `json:"id,omitempty"`
	Login       string     `json:"login"`
	Password    *string    `json:"password,omitempty"`
	Role        []UserRole `json:"role"`
}

// UserRole defines model for User.Role.
type UserRole string

// UserSignIn defines model for UserSignIn.
type UserSignIn struct {
	Email    *string `json:"email,omitempty"`
	Login    *string `json:"login,omitempty"`
	Password *string `json:"password,omitempty"`
}

// UserSignUp defines model for UserSignUp.
type UserSignUp struct {
	Email        *string `json:"email,omitempty"`
	Login        *string `json:"login,omitempty"`
	Notification *bool   `json:"notification,omitempty"`
	Password     *string `json:"password,omitempty"`
}

// Users List of user object
type Users = []User

// UploadCourseImageMultipartBody defines parameters for UploadCourseImage.
type UploadCourseImageMultipartBody map[string]interface{}

// GetCoursesParams defines parameters for GetCourses.
type GetCoursesParams struct {
	// Limit Параметр для получения определенное количество курсов
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Параметр для получения определенного количества курсов через offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// OrderBy Параметр для сортировки курсов по указанному полю и методу сортировки
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetPlaylistsParams defines parameters for GetPlaylists.
type GetPlaylistsParams struct {
	// Limit Параметр для получения определенное количество курсов
	Limit     *int      `form:"limit,omitempty" json:"limit,omitempty"`
	Author    *[]string `form:"author,omitempty" json:"author,omitempty"`
	CreatedAt *string   `form:"createdAt,omitempty" json:"createdAt,omitempty"`
	Status    *[]string `form:"status,omitempty" json:"status,omitempty"`
	Title     *string   `form:"title,omitempty" json:"title,omitempty"`

	// OrderBy Параметр для сортировки курсов по указанному полю и методу сортировки
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// UploadImageMultipartBody defines parameters for UploadImage.
type UploadImageMultipartBody = string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Параметр для получения определенное количество курсов
	Limit *int                  `form:"limit,omitempty" json:"limit,omitempty"`
	Role  *[]GetUsersParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// OrderBy Параметр для сортировки курсов по указанному полю и методу сортировки
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetUsersParamsRole defines parameters for GetUsers.
type GetUsersParamsRole string

// UploadUserAvatarMultipartBody defines parameters for UploadUserAvatar.
type UploadUserAvatarMultipartBody = string

// UploadCourseImageMultipartRequestBody defines body for UploadCourseImage for multipart/form-data ContentType.
type UploadCourseImageMultipartRequestBody UploadCourseImageMultipartBody

// UploadImageMultipartRequestBody defines body for UploadImage for multipart/form-data ContentType.
type UploadImageMultipartRequestBody = UploadImageMultipartBody

// CreatePlaylistJSONRequestBody defines body for CreatePlaylist for application/json ContentType.
type CreatePlaylistJSONRequestBody = Playlist

// UploadUserAvatarMultipartRequestBody defines body for UploadUserAvatar for multipart/form-data ContentType.
type UploadUserAvatarMultipartRequestBody = UploadUserAvatarMultipartBody

// UserSignInJSONRequestBody defines body for UserSignIn for application/json ContentType.
type UserSignInJSONRequestBody = UserSignIn

// UserSignUpJSONRequestBody defines body for UserSignUp for application/json ContentType.
type UserSignUpJSONRequestBody = UserSignUp

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload image
	// (POST /course/image/{user_id})
	UploadCourseImage(w http.ResponseWriter, r *http.Request, userId int)
	// Create course
	// (POST /course/new)
	CreateCourse(w http.ResponseWriter, r *http.Request)
	// Delete course
	// (DELETE /course/{id})
	DeleteCourse(w http.ResponseWriter, r *http.Request, id int)
	// Get course by id
	// (GET /course/{id})
	GetCourseById(w http.ResponseWriter, r *http.Request, id int)
	// Update course
	// (PUT /course/{id})
	UpdateCourse(w http.ResponseWriter, r *http.Request, id int)
	// List all courses
	// (GET /courses)
	GetCourses(w http.ResponseWriter, r *http.Request, params GetCoursesParams)
	// List all playlists
	// (GET /playlists)
	GetPlaylists(w http.ResponseWriter, r *http.Request, params GetPlaylistsParams)
	// Upload image to playlist
	// (POST /playlists/image)
	UploadImage(w http.ResponseWriter, r *http.Request)
	// Create playlist
	// (POST /playlists/new)
	CreatePlaylist(w http.ResponseWriter, r *http.Request)
	// Delete playlist
	// (DELETE /playlists/{id})
	DeletePlaylist(w http.ResponseWriter, r *http.Request, id int)
	// Get playlist by id
	// (GET /playlists/{id})
	GetPlaylistById(w http.ResponseWriter, r *http.Request, id int)
	// Update playlist
	// (PUT /playlists/{id})
	UpdatePlaylist(w http.ResponseWriter, r *http.Request, id int)
	// pong
	// (GET /pong)
	Pong(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id int)
	// Get user by id
	// (GET /user/{id})
	GetUserById(w http.ResponseWriter, r *http.Request, id int)
	// Update user
	// (PUT /user/{id})
	UpdateUser(w http.ResponseWriter, r *http.Request, id int)
	// List all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Upload avatar
	// (POST /users/avatar)
	UploadUserAvatar(w http.ResponseWriter, r *http.Request)
	// Authorize user
	// (POST /users/sign_in)
	UserSignIn(w http.ResponseWriter, r *http.Request)
	// Create user
	// (POST /users/sign_up)
	UserSignUp(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Upload image
// (POST /course/image/{user_id})
func (_ Unimplemented) UploadCourseImage(w http.ResponseWriter, r *http.Request, userId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create course
// (POST /course/new)
func (_ Unimplemented) CreateCourse(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete course
// (DELETE /course/{id})
func (_ Unimplemented) DeleteCourse(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get course by id
// (GET /course/{id})
func (_ Unimplemented) GetCourseById(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update course
// (PUT /course/{id})
func (_ Unimplemented) UpdateCourse(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all courses
// (GET /courses)
func (_ Unimplemented) GetCourses(w http.ResponseWriter, r *http.Request, params GetCoursesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all playlists
// (GET /playlists)
func (_ Unimplemented) GetPlaylists(w http.ResponseWriter, r *http.Request, params GetPlaylistsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload image to playlist
// (POST /playlists/image)
func (_ Unimplemented) UploadImage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create playlist
// (POST /playlists/new)
func (_ Unimplemented) CreatePlaylist(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete playlist
// (DELETE /playlists/{id})
func (_ Unimplemented) DeletePlaylist(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get playlist by id
// (GET /playlists/{id})
func (_ Unimplemented) GetPlaylistById(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update playlist
// (PUT /playlists/{id})
func (_ Unimplemented) UpdatePlaylist(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// pong
// (GET /pong)
func (_ Unimplemented) Pong(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /user/{id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by id
// (GET /user/{id})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /user/{id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all users
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload avatar
// (POST /users/avatar)
func (_ Unimplemented) UploadUserAvatar(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Authorize user
// (POST /users/sign_in)
func (_ Unimplemented) UserSignIn(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /users/sign_up)
func (_ Unimplemented) UserSignUp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UploadCourseImage operation middleware
func (siw *ServerInterfaceWrapper) UploadCourseImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadCourseImage(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCourse(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCourse operation middleware
func (siw *ServerInterfaceWrapper) DeleteCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCourse(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCourseById operation middleware
func (siw *ServerInterfaceWrapper) GetCourseById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourseById(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCourse operation middleware
func (siw *ServerInterfaceWrapper) UpdateCourse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCourse(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCourses operation middleware
func (siw *ServerInterfaceWrapper) GetCourses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoursesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourses(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlaylists operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylists(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlaylistsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "createdAt" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAt", r.URL.Query(), &params.CreatedAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdAt", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "title", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlaylists(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadImage operation middleware
func (siw *ServerInterfaceWrapper) UploadImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadImage(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePlaylist operation middleware
func (siw *ServerInterfaceWrapper) CreatePlaylist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePlaylist(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePlaylist operation middleware
func (siw *ServerInterfaceWrapper) DeletePlaylist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlaylist(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlaylistById operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylistById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlaylistById(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePlaylist operation middleware
func (siw *ServerInterfaceWrapper) UpdatePlaylist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePlaylist(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Pong operation middleware
func (siw *ServerInterfaceWrapper) Pong(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Pong(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadUserAvatar operation middleware
func (siw *ServerInterfaceWrapper) UploadUserAvatar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadUserAvatar(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserSignIn operation middleware
func (siw *ServerInterfaceWrapper) UserSignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserSignIn(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserSignUp operation middleware
func (siw *ServerInterfaceWrapper) UserSignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserSignUp(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/course/image/{user_id}", wrapper.UploadCourseImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/course/new", wrapper.CreateCourse)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/course/{id}", wrapper.DeleteCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/course/{id}", wrapper.GetCourseById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/course/{id}", wrapper.UpdateCourse)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses", wrapper.GetCourses)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/playlists", wrapper.GetPlaylists)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/playlists/image", wrapper.UploadImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/playlists/new", wrapper.CreatePlaylist)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/playlists/{id}", wrapper.DeletePlaylist)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/playlists/{id}", wrapper.GetPlaylistById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/playlists/{id}", wrapper.UpdatePlaylist)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pong", wrapper.Pong)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{id}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{id}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/avatar", wrapper.UploadUserAvatar)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/sign_in", wrapper.UserSignIn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/sign_up", wrapper.UserSignUp)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qQTRvw63Dv8IAAD//9CS7KgrOgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
